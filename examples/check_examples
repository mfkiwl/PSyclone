#!/bin/bash
# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2017-2019, Science and Technology Facilities Council.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Authors: R. W. Ford and A. R. Porter, STFC Daresbury Laboratory
# Modified: I. Kavcic, Met Office

# This is a simple bash script that executes all of the examples that
# are distributed with PSyclone. Note that PSyclone must be installed
# for this script to work (see ../README.md).

# abort if a command fails
set -e

# The location of the driver scripts for psyclone and the
# kernel-stub generator
export PSYCLONE=${PWD}/../bin/psyclone
export KSTUBGEN=${PWD}/../bin/genkernelstub

echo "Running examples dynamo/eg1"
cd dynamo/eg1
python runme.py
python runme_openmp.py
cd -

echo "Running examples dynamo/eg2"
cd dynamo/eg2
python runme.py
python runme_openmp.py
python runme_loop_fuse.py
cd -

echo "Running example dynamo/eg3"
cd dynamo/eg3
${PSYCLONE} solver_mod.x90
${PSYCLONE} -s ./colouring_and_omp.py -nodm solver_mod.x90
cd -

echo "Running example dynamo/eg4"
cd dynamo/eg4
${PSYCLONE} -nodm solver_mod.x90
${PSYCLONE} solver_mod.x90
cd -

echo "Running example dynamo/eg5"
cd dynamo/eg5
${PSYCLONE} alg.f90
cd -

echo "Running example dynamo/eg6"
cd dynamo/eg6
${PSYCLONE} -nodm alg.x90
${PSYCLONE} alg.x90
${PSYCLONE} -nodm -s ./omp_script.py alg.x90
${PSYCLONE} -s ./omp_script.py alg.x90
${PSYCLONE} -s ./omp_reprod_script.py alg.x90
cd -

echo "Running example dynamo/eg7"
cd dynamo/eg7
${PSYCLONE} alg.x90
cd -

echo "Running example dynamo/eg8"
cd dynamo/eg8
${PSYCLONE} helmholtz_solver_alg_mod.x90
${PSYCLONE} -s ./redundant_script.py helmholtz_solver_alg_mod.x90
cd -

echo "Running example dynamo/eg9"
cd dynamo/eg9
${PSYCLONE} advective_inc_alg_mod.x90
${PSYCLONE} -s ./colouring_and_omp.py -nodm advective_inc_alg_mod.x90
cd -

echo "Running example dynamo/eg10"
cd dynamo/eg10
${PSYCLONE} intergrid_3levels.x90
cd -

echo "Running example dynamo/eg11"
cd dynamo/eg11
${PSYCLONE} -s ./async_script.py helmholtz_solver_alg_mod.x90
cd -

echo "Running example dynamo/eg12"
cd dynamo/eg12
${PSYCLONE} -nodm -s ./extract_nodes.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90
${PSYCLONE} -nodm -s ./extract_kernel_with_transformations.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90
python find_kernel.py
cd -

echo "Running example dynamo/eg13"
cd dynamo/eg13
${PSYCLONE} -s ./kernel_constants.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg alg.f90 -opsy psy.f90
rm *.f90
cd -

echo "Running example dynamo/eg14"
cd dynamo/eg14
${PSYCLONE} -s ./acc_kernels.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
${PSYCLONE} -s ./acc_parallel.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
${PSYCLONE} -s ./acc_parallel_dm.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
cd -

echo "Running gocean/eg1"
cd gocean/eg1
python runme.py
python runme_openmp.py
python runme_loop_fuse.py
python runme_dag.py
python runme_openacc.py
cd -

echo "Running gocean/eg2"
cd gocean/eg2
# We don't do the full compile because that requires a Fortran compiler
# and the dl_esm_inf library
${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg.f90
cd -

echo "Running gocean/eg3"
cd gocean/eg3
${PSYCLONE} -api "gocean1.0" -s ./ocl_trans.py alg.f90
cd -

echo "Running gocean/eg4"
cd gocean/eg4
${PSYCLONE} -api "gocean1.0" alg.f90
# The following fails because PSyclone spots that one of the kernels
# accesses data from a module and therefore cannot be transformed. TODO #323.
echo "TODO #323"
#${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg.f90
cd -

echo "Running example nemo/eg1"
cd nemo/eg1
./runme_openmp.py
cd -
echo "Running example nemo/eg2"
cd nemo/eg2
./runme_openmp.py
${PSYCLONE} -api "nemo" -s ./omp_levels_trans.py ../code/traldf_iso.F90
cd -
echo "Running example nemo/eg3"
cd nemo/eg3
${PSYCLONE} -api "nemo" -s ./kernels_trans.py ../code/tra_adv.F90
${PSYCLONE} -api "nemo" -s ./kernels_managed_mem_trans.py ../code/tra_adv.F90
cd -
echo "Running example nemo/eg4"
cd nemo/eg4
for file in "copy_stencil.f90" \
		"hori_diff.f90" \
		"tridiagonal_solve.f90" \
		"if_example.f90"; do
    echo "file" ${file} "..."
    ${PSYCLONE} -api "nemo" -s ./sir_trans.py ${file} -opsy /dev/null
done
cd -

echo "Running transformation examples"
cd transformations/inline
python module_inline_example.py
cd -

echo "Running line-length examples"
cd line_length
python runme.py
cd -

echo "Running stub generation examples"
cd stub_generation
${KSTUBGEN} testkern_stencil_multi_mod.f90
cd -

echo "Testing dynamo scripts"
cd dynamo/scripts
for script in "colouring_and_omp.py" \
		  "loop_fuse.py" \
		  "redundant_dofs.py" \
		  "redundant_setval_c.py" \
		  "kernel_print.py"; do
    echo "script" ${script} "..."
    ${PSYCLONE} -s ./${script} ../eg3/solver_mod.x90 -oalg /dev/null -opsy /dev/null
done
cd -
